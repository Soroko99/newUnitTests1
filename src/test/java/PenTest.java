import java.io.*;
import java.lang.reflect.Field;
import java.util.Locale;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import static org.testng.Assert.*;
import static org.testng.AssertJUnit.assertNotNull;

/**
 * Unit test for simple App.
 */

public class PenTest {
    static int inkForTest = 1000;
    static double sizeLetterForTest = 1.0;

    @DataProvider
    public Object[][] positiveAllParamsProvider() {
        return new Object[][]{
                {8900, 2.1, "word"}, {12000, 3.2, "wordword"}
        };
    }

    @DataProvider
    public Object[][] negativeAllParamsProvider(){
        return new Object[][]{
                {1, 2.0, ""},{2, 3.2, "word"}
        };
    }

    @DataProvider
    public Object[][] positiveTwoParamsProvider(){
        return new Object[][]{
                {1000, 1.0}, {100, 10.0}
        };
    }

    @DataProvider
    public Object[][] positiveInkContainerValueProvider() {
        return new Object[][]{
                {100}, {5}
        };
    }

    @DataProvider
    public Object[][] negativeInkContainerValueProvider(){
        return new Object[][]{
                {-1}, {0}
        };
    }

    @DataProvider
    public Object[][] colorProvider() {
        return new Object[][]{
                {"Red"}, {"Blue"}
        };
    }

    @Test(dataProvider = "colorProvider")
    public void doSomethingElseTest(String color) throws NoSuchFieldException, IllegalAccessException {
        Pen pen = new Pen(inkForTest);
        Class<? extends Pen> clazz = pen.getClass();
        Field field = clazz.getDeclaredField("color");
        field.setAccessible(true);
        field.set(pen, color);
        ByteArrayOutputStream newOutput = new ByteArrayOutputStream();
        System.setOut(new PrintStream(newOutput));
        pen.doSomethingElse();
        assertNotEquals(newOutput.toString().toLowerCase(Locale.ROOT), color.toLowerCase(Locale.ROOT));
        field.setAccessible(false);
    }

    @Test(dataProvider = "colorProvider")
    public void testGetColorPen(String color) {
       Pen pen = new Pen(inkForTest, sizeLetterForTest, color);
       assertEquals(pen.getColor().toLowerCase(Locale.ROOT), color.toLowerCase(Locale.ROOT));
    }

    @Test(dataProvider = "positiveAllParamsProvider")
    public void positiveIsWriteTest(int containerValue, double sizeLetter, String word) {
        Pen pen = new Pen(containerValue, sizeLetter);
        assertTrue(pen.write(word).length() != 0);
    }

    @Test(dataProvider = "negativeAllParamsProvider")
    public void negativeIsWriteTest(int containerValue, double sizeLetter, String word) {
        Pen penWithNegativeParams = new Pen(containerValue, sizeLetter);
        assertFalse(penWithNegativeParams.write(word).length() != 0);
    }

    @Test(dataProvider = "positiveInkContainerValueProvider")
    public void constructorWithOneParamTest(int inkContainerValue) {
        Pen penWithOneParam = new Pen(inkContainerValue);
        assertNotNull(penWithOneParam);
    }

    @Test(dataProvider = "positiveTwoParamsProvider")
    public void constructorWithTwoParamsTest(int inkContainerValue, double sizeLetter) {
        Pen penWithTwoParams = new Pen(inkContainerValue, sizeLetter);
        assertNotNull(penWithTwoParams);
    }

    @Test(dataProvider = "positiveAllParamsProvider")
    public void constructorWithThreeParamsTest(int inkContainerValue, double sizeLetter, String color) {
        Pen penWithThreeParams = new Pen(inkContainerValue, sizeLetter, color);
        assertNotNull(penWithThreeParams);
    }
//
    @Test(dataProvider = "positiveInkContainerValueProvider")
    public void isWorkTestPositive(int inkContainerValue) {
        Pen penWithPositiveInkValue = new Pen(inkContainerValue);
        assertTrue(penWithPositiveInkValue.isWork());
    }

    @Test(dataProvider = "negativeInkContainerValueProvider")
    public void isWorkTestNegative(int inkContainerValue) {
        Pen penWithNegativeInkValue = new Pen(inkContainerValue);
        assertFalse(penWithNegativeInkValue.isWork());
    }
}